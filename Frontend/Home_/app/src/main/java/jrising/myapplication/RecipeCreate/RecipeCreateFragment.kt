package jrising.myapplication.RecipeCreate


import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.support.v4.app.Fragment
import android.text.Editable
import android.util.Base64
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import jrising.myapplication.RecipeView.IngredientFragment
import jrising.myapplication.R
import jrising.myapplication.app.AppController
import jrising.myapplication.net_utils.Const
import jrising.myapplication.net_utils.Userinfo

import kotlinx.android.synthetic.main.fragment_recipe_create.*
import org.json.JSONArray
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream


/**
 * A [Fragment] subclass used to create recipes
 *
 */
class RecipeCreateFragment : Fragment() {
    var imagePath : Uri? = null
    var thumbnailPath : Uri? = null
    var ingredients = JSONArray()
    var RecipeCreateHandler : IRecipeCreateHandler = BasicRecipeCreateHandler()

    /**
     * An override method generated by Android Studio
     */
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_recipe_create, container, false)
    }

    /**
     * An override method generated by Android
     * Extended to attach listeners to the separate buttons in the view
     */
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        rCreate_getImage.setOnClickListener {
            selectImage(R.id.rCreate_getImage)
        }
      /*  rCreate_takeImage.setOnClickListener {
            selectImage(R.id.rCreate_takeImage)
        }
        rCreate_getThumbnail.setOnClickListener {
            takeImage(R.id.rCreate_takeImage)
        }
        rCreate_takeThumbnail.setOnClickListener {
            takeImage(R.id.rCreate_takeThumbnail)
        }*/
        rCreate_submit.setOnClickListener {
            Log.d("rCreate", "Create button pressed")
            submitRecipe()
        }
        rIngredient_submit.setOnClickListener { ingredientAdded()}
    }

    private fun submitRecipe() {
        Log.d("rCreate", "submitRecipe entered")
        RecipeCreateHandler.addName(rCreate_title.text.toString())
        RecipeCreateHandler.addDescription(rCreate_description.text.toString())
        RecipeCreateHandler.addSteps(rCreate_steps.text.toString())
        RecipeCreateHandler.addNumberOfServings(rCreate_numberServings.text.toString().toInt())
        RecipeCreateHandler.addPrepTime(rCreate_prepTime.text.toString().toDouble())
        RecipeCreateHandler.addTotalTime(rCreate_totalTime.text.toString().toDouble())
        RecipeCreateHandler.addTags(rCreate_tags.text.toString())
        RecipeCreateHandler.submitRecipe()
    }

    private fun selectImage(id : Int) {
        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
        intent.type = "image/*"
        intent.action = Intent.ACTION_GET_CONTENT
        intent.putExtra("aspectX", 1)
        intent.putExtra("aspectY", 1)
        intent.putExtra("scale", true)
        intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString())
        if (id == R.id.rCreate_getImage)
            startActivityForResult(Intent.createChooser(intent, "Select Picture"), Const.PICK_IMAGE)
        else if (id == R.id.rCreate_getThumbnail)
            startActivityForResult(Intent.createChooser(intent, "Select Thumbnail"), Const.PICK_THUMBNAIL)
    }

    private fun takeImage(id : Int) {
        val intent = Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE)
      /*  if (id == R.id.rCreate_takeImage)
            startActivityForResult(intent, Const.PICK_CAPTURE)
        else if (id == R.id.rCreate_takeThumbnail)
            startActivityForResult(intent, Const.CAPTURE_THUMBNAIL)*/
    }

    /**
     * A method used when a created activity finishes
     * Takes the requestCode and resultCode and uses it to do different actions
     * @param requestCode The [Int] request code
     * @param resultCode The [Int] result code
     * @param data The [Intent] response from the activity
     * If the result code is not [Activity.RESULT_OK] we exit
     * [Const.PICK_CAPTURE] and [Const.PICK_THUMBNAIL] are for taking pictures with the camera for the main picture and thumbnail respectively
     * [Const.Pick_IMAGE] and [Const.PICK_THUMBNAIL] are for picking pre-existing pictures from the gallery for the main picture and thumbnail respectively
     */
    override fun onActivityResult(requestCode : Int, resultCode : Int, data : Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        // If the result is not ok, we exit
        if(resultCode != Activity.RESULT_OK) return
        // Check if the request was pick capture
        when (requestCode) {
            // Used when taking a picture for the main image
            Const.PICK_CAPTURE -> {
                // Get image from the camera
            }
            // Used when taking a picture for the thumbnail
            Const.CAPTURE_THUMBNAIL -> {
                // Get thumbnail from the camera
            }
            // Used when choosing a picture for the main image
            Const.PICK_IMAGE -> {
                // Get the uri from the intent
                val fileUri = data?.data
                imagePath = fileUri
                // Set the uri
                val bitmap = MediaStore.Images.Media.getBitmap(context!!.contentResolver, fileUri)
                if(bitmap == null) return
                //rCreate_image.setImageBitmap(bitmap)
                //rCreate_image.setImageURI(fileUri)
                val b64 = AppController.instance.convertBitmapToBase64(bitmap)
                val bytes = Base64.decode(b64, Base64.NO_WRAP)
                val decodedBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
                rCreate_image.setImageBitmap(decodedBitmap)
                rCreate_image.visibility = View.VISIBLE
                //RecipeCreateHandler.addImageFromPath(fileUri)
                RecipeCreateHandler.addImage(bitmap)
            }
            // Used when choosing a picture for the thumbnail
            Const.PICK_THUMBNAIL -> {
                val fileUri = data?.data
                thumbnailPath = fileUri
                rCreate_thumbnail.setImageURI(fileUri)
                rCreate_thumbnail.visibility = View.VISIBLE
                RecipeCreateHandler.addThumbnailFromPath(fileUri)
            }
            else -> {
                return
            }
        }
    }

    private fun ingredientAdded() {
        val name: String = rIngredient_name.text.toString()
        val unit: String = rIngredient_unit.text.toString()
        val amount = rIngredient_amount.text.toString().toDouble()
        rIngredient_name.text = Editable.Factory().newEditable("")
        rIngredient_unit.text = Editable.Factory().newEditable("")
        rIngredient_amount.text = Editable.Factory().newEditable("")
        val ingredient = RecipeCreateHandler.addIngredient(name, unit, amount)
        val fm = fragmentManager
        val transaction = fm?.beginTransaction()
        val fragment = IngredientFragment()
        fragment.source = ingredient
        transaction?.add(R.id.rCreate_ingredientContainer, fragment)
        transaction?.commit()
    }
}
