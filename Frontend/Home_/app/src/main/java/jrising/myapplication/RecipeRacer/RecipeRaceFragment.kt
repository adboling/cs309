package jrising.myapplication.RecipeRacer

import android.app.Activity
import android.content.res.Resources
import android.os.Bundle
import android.os.SystemClock
import android.support.design.widget.TextInputEditText
import android.support.v4.app.Fragment
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import jrising.myapplication.R

import kotlinx.android.synthetic.main.fragment_recipe_race.*
import java.util.*

/**
 * A [Fragment] to act as a controller and view for the RecipeRace
 */
open class RecipeRaceFragment : Fragment(), IRecipeRaceListener {
    /**
     * The [RecipeRaceController]
     */
    var controller = RecipeRaceController()
    /**
     * The recipe ID [String]
     */
    lateinit var recipeID: String
    /**
     * The session ID, initially zero, but should get initialized before the fragment is active
     */
    var sessionID = 0
    /**
     * The [RecipeRaceData] to display
     */
    lateinit var state: RecipeRaceData
    /**
     * True when we're connected to the server, false otherwise
     */
    var connected = false

    var chatList: MutableList<String> = ArrayList()
    var ingredientList: MutableList<RRIngredient> = ArrayList()
    var participantList: MutableList<RRParticipant> = ArrayList()

    /** A whole bunch of vars for testing */
    lateinit var _rr_chrono: Chronometer
    lateinit var _rr_sessionID: TextView
    lateinit var _rr_startStop: Button
    lateinit var _rr_connectDisconnect: Button
    lateinit var _rr_participantList: RecyclerView
    lateinit var _rr_ingredientList: RecyclerView
    lateinit var _rr_steps: TextView
    lateinit var _rr_chatlist: ListView
    lateinit var _rr_input_message: TextInputEditText
    lateinit var _rr_send: Button
    lateinit var _activity: Activity
    lateinit var _rr_main_layout: RelativeLayout
    lateinit var _rr_reset: Button
    lateinit var _resources: Resources
    lateinit var ingredientManager: LinearLayoutManager
    lateinit var participantManager: LinearLayoutManager

    fun activity(): Activity {
        return _activity
    }

    /**
     * A method to separate out the time for testing
     */
    fun getTime(): Long {
        return SystemClock.elapsedRealtime()
    }

    /**
     * An override method called when the fragment is createdd
     * Initializes the model if we have a sessionID or recipeID
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            recipeID = it.getString(bundle_recipe_id)
            sessionID = it.getInt(bundle_session_id)
        }
        if(sessionID > 0) {
            if(recipeID != "" && recipeID != "null") {
                // We have a recipeID and sessionID
                controller = RecipeRaceController(sessionID, recipeID)
            } else {
                // We have a sessionID but no recipeID
                controller = RecipeRaceController(sessionID)
            }
        } else {
            if(recipeID != "" && recipeID != "null") {
                // We have a recipeID but no sessionID
                controller = RecipeRaceController(recipeID)
            } else {
                // We have nothing, so we'll leave the default constructor
            }
        }
        _activity = activity as Activity

    }

    private fun initializeViews() {
        participantManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)
        ingredientManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)
        _rr_chatlist = rr_chatList
        _rr_ingredientList = rr_ingredientsList
        _rr_participantList = rr_participantList
        _rr_chatlist.adapter = ArrayAdapter<String>(context, R.layout.rr_chat_item, chatList)
        _rr_participantList.layoutManager = participantManager
        _rr_ingredientList.layoutManager = ingredientManager
        _rr_participantList.adapter = RRParticipantAdapter(participantList)
        _rr_ingredientList.adapter = RRIngredientAdapter(ingredientList){index ->
            onIngredientClick(index)
        }
        _rr_chrono = rr_chrono
        _rr_sessionID = rr_sessionID
        _rr_startStop = rr_startStop
        _rr_connectDisconnect = rr_connectDisconnect
        _rr_steps = rr_steps
        _rr_input_message = rr_chatIn
        _rr_send = rr_send
        _rr_main_layout = rr_main_layout
        _rr_reset = rr_resetTime
    }

    /**
     * An override method generated by Android Studio to create the view for the fragment
     */
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        super.onCreateView(inflater, container, savedInstanceState)
        val view = inflater.inflate(R.layout.fragment_recipe_race, container, false)
        return view
    }

    /**
     * An override method called during the [Fragment] lifecycle when the view is created
     * Sets up the clickListeners
     */
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initializeViews()
        _rr_connectDisconnect.setOnClickListener {
            connectButtonPressed()
        }
        _rr_send.setOnClickListener{
            sendMessage()
        }
        _rr_startStop.setOnClickListener {
            start_stop_pressed()
        }
        _rr_reset.setOnClickListener {
            resetPressed()
        }

        _rr_input_message = rr_chatIn
        _resources = resources
    }

    /**
     * The function called when the connect button is pressed
     * Left public for testing
     */
    fun connectButtonPressed() {
        if(connected) {
            controller.disconnect()
            _activity.runOnUiThread{
                _rr_connectDisconnect.text = _resources.getString(R.string.connect)
            }
        } else {
            if(sessionID != 0) {
                controller.setListener(this)
                controller.connect(sessionID)
                _rr_connectDisconnect.text = _resources.getString(R.string.disconnect)
            } else {
                // Do nothing because we have no session
            }
        }
    }

    /**
     * A method to send a message to the controller
     */
    fun sendMessage() {
        controller.sendMessage(_rr_input_message.text.toString())
    }

    private fun resetPressed() {
        controller.resetTime()
    }

    private fun start_stop_pressed() {
        if(state.running) {
            controller.pauseTime()
        } else {
            controller.startTime()
        }
    }

    fun setChrono(base: Long, running: Boolean) {
        _activity.runOnUiThread{
            _rr_chrono.stop()
            rr_chrono.stop()
            _rr_chrono.base = base
            rr_chrono.base = base
            if(running) {
                _rr_chrono.start()
                rr_chrono.start()
            }
        }

    }

    fun setText(view: TextView, text: String) {
        _activity.runOnUiThread{
            view.text = text
            view.invalidate()
        }

    }

    fun updateView(view: View) {
        _activity.runOnUiThread{
            view.invalidate()
            view.requestLayout()
        }
    }

    override fun startTimer(startTime: Long) {
        _activity.runOnUiThread{
            _rr_chrono.base = startTime
            _rr_chrono.start()
            _rr_startStop.text = _resources.getText(R.string.rr_pause)
        }
        state.running = true
    }

    override fun pauseTimer() {
        _activity.runOnUiThread{
            _rr_chrono.stop()
            _rr_startStop.text = _resources.getText(R.string.rr_start)
        }
        state.running = false
    }

    override fun resetTimer() {
        _activity.runOnUiThread{
            _rr_chrono.stop()
            _rr_chrono.base = SystemClock.elapsedRealtime()
            _rr_startStop.text = _resources.getText(R.string.rr_start)
        }
        state.running = false
    }

    private fun updateListAdapters() {
        _activity.runOnUiThread{
            _rr_ingredientList.adapter = RRIngredientAdapter(ingredientList) {index ->
                onIngredientClick(index)
            }
            _rr_participantList.adapter = RRParticipantAdapter(participantList)
        }
    }


    override fun update(data: RecipeRaceData) {

        state = data
        connected = data.connected

        // Set up the chronometer
        setChrono(getTime() - data.elapsedTime, data.running)

        // Set up the session id
        val sessionText = _resources.getString(R.string.rr_session) + data.sessionID
        setText(_rr_sessionID, sessionText)

        // Set the participants list
        participantList = data.participants.toMutableList()

        // Set the ingredients list
        ingredientList = data.ingredients

        setText(_rr_steps, data.steps)
        updateListAdapters()
        updateView(_rr_main_layout)
    }

    override fun handleMessage(message: String) {
        chatList.add(message)
        updateView(_rr_main_layout)
        updateView(_rr_chatlist)
    }

    private fun onIngredientClick(index: Int) {
        controller.completeIngredient(index)
    }

    companion object {
        const val bundle_session_id = "sessionID"
        const val bundle_recipe_id = "recipeID"

        @JvmStatic
        fun newInstance(sessionID: Int, recipeID: String) =
            RecipeRaceFragment().apply {
                arguments = Bundle().apply {
                    putInt(bundle_session_id, sessionID)
                    putString(bundle_recipe_id, recipeID)
                }
            }
    }
}